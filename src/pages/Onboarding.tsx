
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';

const Onboarding = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [answers, setAnswers] = useState<Record<string, any>>({});
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const steps = [
    {
      title: "M·ª•c ti√™u c·ªßa b·∫°n l√† g√¨?",
      subtitle: "Ch·ªçn nh·ªØng g√¨ b·∫°n mu·ªën c·∫£i thi·ªán",
      multiSelect: true,
      options: [
        { id: 'flexibility', label: 'TƒÉng ƒë·ªô d·∫ªo dai', icon: 'ü§∏‚Äç‚ôÄÔ∏è', description: 'C·∫£i thi·ªán kh·∫£ nƒÉng u·ªën cong c∆° th·ªÉ' },
        { id: 'stress', label: 'Gi·∫£m stress', icon: 'üòå', description: 'Th∆∞ gi√£n tinh th·∫ßn, b√¨nh an n·ªôi t√¢m' },
        { id: 'strength', label: 'TƒÉng s·ª©c m·∫°nh', icon: 'üí™', description: 'X√¢y d·ª±ng c∆° b·∫Øp v√† s·ª©c b·ªÅn' },
        { id: 'weight', label: 'Ki·ªÉm so√°t c√¢n n·∫∑ng', icon: '‚öñÔ∏è', description: 'ƒê·ªët ch√°y calo v√† gi·ªØ d√°ng' },
        { id: 'sleep', label: 'C·∫£i thi·ªán gi·∫•c ng·ªß', icon: 'üò¥', description: 'Ng·ªß ngon v√† s√¢u gi·∫•c h∆°n' },
        { id: 'balance', label: 'TƒÉng thƒÉng b·∫±ng', icon: 'üïäÔ∏è', description: 'C√¢n b·∫±ng c∆° th·ªÉ v√† t√¢m tr√≠' }
      ]
    },
    {
      title: "Tr√¨nh ƒë·ªô yoga c·ªßa b·∫°n?",
      subtitle: "Ch√∫ng t√¥i s·∫Ω ƒëi·ªÅu ch·ªânh b√†i t·∫≠p ph√π h·ª£p",
      options: [
        { id: 'beginner', label: 'M·ªõi b·∫Øt ƒë·∫ßu', icon: 'üå±', description: 'Ch∆∞a c√≥ kinh nghi·ªám ho·∫∑c r·∫•t √≠t' },
        { id: 'intermediate', label: 'Trung b√¨nh', icon: 'üåø', description: 'ƒê√£ t·∫≠p ƒë∆∞·ª£c v√†i th√°ng ƒë·∫øn 1 nƒÉm' },
        { id: 'advanced', label: 'N√¢ng cao', icon: 'üå≥', description: 'ƒê√£ t·∫≠p yoga h∆°n 1 nƒÉm' }
      ]
    },
    {
      title: "B·∫°n mu·ªën t·∫≠p bao l√¢u m·ªói ng√†y?",
      subtitle: "L·ª±a ch·ªçn th·ªùi gian ph√π h·ª£p v·ªõi l·ªãch tr√¨nh",
      options: [
        { id: '15', label: '15 ph√∫t', icon: '‚è∞', description: 'Ph√π h·ª£p cho ng∆∞·ªùi b·∫≠n r·ªôn' },
        { id: '30', label: '30 ph√∫t', icon: '‚è±Ô∏è', description: 'C√¢n b·∫±ng gi·ªØa hi·ªáu qu·∫£ v√† th·ªùi gian' },
        { id: '45', label: '45 ph√∫t', icon: '‚è≤Ô∏è', description: 'T·∫≠p trung v√† to√†n di·ªán' },
        { id: '60', label: '60 ph√∫t', icon: 'üïê', description: 'Tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß nh·∫•t' }
      ]
    },
    {
      title: "B·∫°n c√≥ v·∫•n ƒë·ªÅ s·ª©c kh·ªèe n√†o c·∫ßn l∆∞u √Ω?",
      subtitle: "Ch√∫ng t√¥i s·∫Ω ƒëi·ªÅu ch·ªânh b√†i t·∫≠p an to√†n cho b·∫°n",
      multiSelect: true,
      options: [
        { id: 'back_pain', label: 'ƒêau l∆∞ng', icon: 'ü¶¥', description: 'ƒêau l∆∞ng d∆∞·ªõi ho·∫∑c tr√™n' },
        { id: 'knee_issues', label: 'V·∫•n ƒë·ªÅ ƒë·∫ßu g·ªëi', icon: 'ü¶µ', description: 'ƒêau kh·ªõp g·ªëi ho·∫∑c ch·∫•n th∆∞∆°ng' },
        { id: 'neck_pain', label: 'ƒêau c·ªï vai g√°y', icon: 'üíÜ‚Äç‚ôÄÔ∏è', description: 'CƒÉng th·∫≥ng v√πng c·ªï vai' },
        { id: 'high_bp', label: 'Huy·∫øt √°p cao', icon: '‚ù§Ô∏è', description: 'C·∫ßn tr√°nh c√°c t∆∞ th·∫ø ƒë·∫£o ng∆∞·ª£c' },
        { id: 'pregnancy', label: 'Mang thai', icon: 'ü§∞', description: 'Yoga cho m·∫π b·∫ßu' },
        { id: 'none', label: 'Kh√¥ng c√≥', icon: '‚úÖ', description: 'S·ª©c kh·ªèe t·ªët, kh√¥ng v·∫•n ƒë·ªÅ g√¨' }
      ]
    }
  ];

  const currentStepData = steps[currentStep];
  const progress = ((currentStep + 1) / steps.length) * 100;

  const handleOptionSelect = (optionId: string) => {
    const stepKey = `step_${currentStep}`;
    
    if (currentStepData.multiSelect) {
      const currentSelections = answers[stepKey] || [];
      if (optionId === 'none') {
        setAnswers({ ...answers, [stepKey]: ['none'] });
      } else {
        const newSelections = currentSelections.includes(optionId)
          ? currentSelections.filter((id: string) => id !== optionId && id !== 'none')
          : [...currentSelections.filter((id: string) => id !== 'none'), optionId];
        setAnswers({ ...answers, [stepKey]: newSelections });
      }
    } else {
      setAnswers({ ...answers, [stepKey]: optionId });
    }
  };

  const isOptionSelected = (optionId: string) => {
    const stepKey = `step_${currentStep}`;
    if (currentStepData.multiSelect) {
      return (answers[stepKey] || []).includes(optionId);
    }
    return answers[`step_${currentStep}`] === optionId;
  };

  const canProceed = () => {
    const stepKey = `step_${currentStep}`;
    if (currentStepData.multiSelect) {
      return (answers[stepKey] || []).length > 0;
    }
    return answers[stepKey];
  };

  const handleNext = async () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      setIsLoading(true);
      // Simulate AI processing
      await new Promise(resolve => setTimeout(resolve, 3000));
      navigate('/dashboard');
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-ivory-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-20 h-20 mx-auto mb-6 rounded-full gradient-sage flex items-center justify-center animate-pulse">
            <span className="text-2xl text-white">üßò‚Äç‚ôÄÔ∏è</span>
          </div>
          <h2 className="text-2xl font-serif font-bold text-sage-800 mb-4">
            ƒêang t·∫°o l·ªô tr√¨nh cho b·∫°n...
          </h2>
          <p className="text-sage-600 mb-6">AI Coach ƒëang ph√¢n t√≠ch v√† thi·∫øt k·∫ø ch∆∞∆°ng tr√¨nh t·∫≠p luy·ªán c√° nh√¢n</p>
          <div className="w-64 mx-auto">
            <Progress value={75} className="h-2" />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-ivory-50 p-4">
      <div className="max-w-md mx-auto">
        {/* Header */}
        <div className="mb-8 pt-4">
          <div className="flex items-center justify-between mb-4">
            <Button
              variant="ghost"
              onClick={handleBack}
              disabled={currentStep === 0}
              className="text-sage-600 hover:text-sage-800"
            >
              ‚Üê Quay l·∫°i
            </Button>
            <span className="text-sm text-sage-600 font-medium">
              {currentStep + 1}/{steps.length}
            </span>
          </div>
          <Progress value={progress} className="h-2 mb-6" />
          
          <h1 className="text-2xl font-serif font-bold text-sage-800 mb-2">
            {currentStepData.title}
          </h1>
          <p className="text-sage-600">
            {currentStepData.subtitle}
          </p>
        </div>

        {/* Options - Fixed height container to prevent layout shifts */}
        <div className="min-h-[400px] mb-8">
          <div className="space-y-3">
            {currentStepData.options.map((option) => (
              <Card
                key={option.id}
                className={`p-4 cursor-pointer transition-all duration-200 border-2 min-h-[80px] ${
                  isOptionSelected(option.id)
                    ? 'border-sage-500 bg-sage-50 shadow-md'
                    : 'border-sage-200 bg-white hover:border-sage-300 hover:shadow-sm'
                }`}
                onClick={() => handleOptionSelect(option.id)}
              >
                <div className="flex items-start space-x-3 h-full">
                  <span className="text-2xl flex-shrink-0">{option.icon}</span>
                  <div className="flex-1">
                    <h3 className="font-semibold text-sage-800 mb-1">{option.label}</h3>
                    <p className="text-sm text-sage-600">{option.description}</p>
                  </div>
                  <div className="flex-shrink-0 w-6 h-6 flex items-center justify-center">
                    {isOptionSelected(option.id) && (
                      <div className="w-6 h-6 rounded-full gradient-sage flex items-center justify-center">
                        <span className="text-white text-sm">‚úì</span>
                      </div>
                    )}
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>

        {/* Continue Button */}
        <Button
          onClick={handleNext}
          disabled={!canProceed()}
          className="w-full gradient-sage text-white font-medium py-6 text-lg rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {currentStep === steps.length - 1 ? 'Ho√†n t·∫•t' : 'Ti·∫øp t·ª•c'}
        </Button>
      </div>
    </div>
  );
};

export default Onboarding;
